#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([stage],[s],[The deployment stage],[dev])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='sh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_stage="dev"


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-s|--stage <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-s, --stage: The deployment stage [dev] (default: 'dev')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--stage)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_stage="$2"
				shift
				;;
			--stage=*)
				_arg_stage="${_key##--stage=}"
				;;
			-s*)
				_arg_stage="${_key##-s}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

if [ "$_arg_stage" == "dev" ]; then
    echo "Dev stage deployment"
else
    echo "Invalid deployment stage"
    exit 1
fi

echo "Building Go code"
cd lambda_code

cd testing_go && make && cd ..

echo "Finished building Go code"
cd ..

cd ./terraform/live/$_arg_stage
terragrunt run-all apply -input=false -auto-approve --terragrunt-non-interactive


# ] <-- needed because of Argbash